{"meta":{"title":"xunhan","subtitle":"博客","description":"这是训瀚的博客","author":"xunhanliu","url":"https://www.xunhanliu.top"},"pages":[{"title":"","date":"2018-07-03T08:16:28.185Z","updated":"2018-07-03T08:16:28.185Z","comments":true,"path":"about/index.html","permalink":"https://www.xunhanliu.top/about/index.html","excerpt":"","text":"关于我从事 WEB 开发，主要开发语言 PHP，熟悉使用 Laravel、ThinkPHP 等主流框架；对 Modern PHP 情有独钟；有一定的代码洁癖。 对服务端、前端、数据分析等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 关于工作城市：深圳 关于学习正在往终身学习者前进…近期学习方向：Python (人工智能) 关于座右铭 The Harder You Work, The Luckier You Will Be. (越努力，越幸运) 关于爱好热爱运动，尤其喜爱羽毛球、阅读、电影（Top250）、旅行。 联系我 Home: minhow.com Blog: blog.minhow.com Email: huangminhow@gmail.com GitHub: MinHow WeiBo: MinHow Twitter: MinHow"},{"title":"","date":"2018-07-05T14:45:10.836Z","updated":"2018-07-05T14:45:03.791Z","comments":true,"path":"css/test.css","permalink":"https://www.xunhanliu.top/css/test.css","excerpt":"","text":"#outCSS{ color: #0f0; }"},{"title":"","date":"2018-07-05T21:41:18.475Z","updated":"2018-07-05T21:41:18.475Z","comments":true,"path":"css/tsne-how_use/last.js","permalink":"https://www.xunhanliu.top/css/tsne-how_use/last.js","excerpt":"","text":"(function() { var format = d3.format(\",\"); d3.selectAll(\".tsne-group\").data(figures, function(d) { if(!d) return this.dataset.id; return d.id }) .each(generateFigure) function generateFigure(figure) { var FIGURE = figure.id var dis = d3.select(this) var original = dis.append(\"div\").classed(\"original\", true) original.append(\"div\") .classed(\"image\", true) .append(\"img\") .classed(\"tsne-plot\", true) .attr(\"src\", \"assets/figure_\" + FIGURE + \"_\" + \"original.png\"); original.append(\"h3\").classed(\"caption\", true).text(\"Original\") // examples var runners = dis.selectAll(\".runner\").data(figure.examples) .enter().append(\"div\").classed(\"runner\", true) if(!figure.noclick) { runners .classed(\"clickable\", true) .on(\"click\", function(d) { d3.selectAll(\".runner\").classed(\"selected\", false) updateStateFromFigure(figure, d, this); d3.select(this).classed(\"selected\", true) }); } else { runners.classed(\"no-click\", true) } runners.append(\"div\") .classed(\"image\", true) .append(\"img\") .attr(\"src\", function(d,i) { return \"assets/figure_\" + FIGURE + \"_\" + d.id + \".png\" }); if(!figure.noclick) { runners.append(\"i\") .classed(\"material-icons\", true) .text(\"open_in_browser\") } var caption = runners.append(\"div\").classed(\"caption\", true); caption.append(\"div\").text(function(d) { return \"Perplexity: \" + format(d.perplexity); }) caption.append(\"div\").text(function(d) { return \"Step: \" + format(d.step); }) } })() function nodeFromString(str) { var div = document.createElement(\"div\"); div.innerHTML = str; return div.firstChild; } function make_hover_css(pos) { var pretty = window.innerWidth > 600; var padding = pretty? 18 : 12; var outer_padding = pretty ? 18 : 0; var bbox = document.querySelector(\"body\").getBoundingClientRect(); var left = pos[0] - bbox.left, top = pos[1] - bbox.top; var width = Math.min(window.innerWidth-2*outer_padding, 648); left = Math.min(left, window.innerWidth-width-outer_padding); width = width - 2*padding; return (`position: absolute; background-color: #FFF; opacity: 0.95; max-width: ${width}px; top: ${top}px; left: ${left}px; border: 1px solid rgba(0, 0, 0, 0.25); padding: ${padding}px; border-radius: ${pretty? 3 : 0}px; box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.2); z-index: ${1e6};`); } function DtHoverBox(div_id) { this.div = document.querySelector(\"#\"+div_id); this.visible = false; this.bindDivEvents(); DtHoverBox.box_map[div_id] = this; } DtHoverBox.box_map = {}; DtHoverBox.get_box = function get_box(div_id) { if (div_id in DtHoverBox.box_map) { return DtHoverBox.box_map[div_id]; } else { return new DtHoverBox(div_id); } } DtHoverBox.prototype.show = function show(pos){ this.visible = true; this.div.setAttribute(\"style\", make_hover_css(pos) ); for (var box_id in DtHoverBox.box_map) { var box = DtHoverBox.box_map[box_id]; if (box != this) box.hide(); } } DtHoverBox.prototype.showAtNode = function showAtNode(node){ var bbox = node.getBoundingClientRect(); this.show([bbox.right, bbox.bottom]); } DtHoverBox.prototype.hide = function hide(){ this.visible = false; if (this.div) this.div.setAttribute(\"style\", \"display:none\"); if (this.timeout) clearTimeout(this.timeout); } DtHoverBox.prototype.stopTimeout = function stopTimeout() { if (this.timeout) clearTimeout(this.timeout); } DtHoverBox.prototype.extendTimeout = function extendTimeout(T) { //console.log(\"extend\", T) var this_ = this; this.stopTimeout(); this.timeout = setTimeout(function(){this_.hide();}.bind(this), T); } // Bind events to a link to open this box DtHoverBox.prototype.bind = function bind(node) { if (typeof node == \"string\"){ node = document.querySelector(node); } node.addEventListener(\"mouseover\", function(){ if (!this.visible) this.showAtNode(node); this.stopTimeout(); }.bind(this)); node.addEventListener(\"mouseout\", function(){this.extendTimeout(250);}.bind(this)); node.addEventListener(\"touchstart\", function(e) { if (this.visible) { this.hide(); } else { this.showAtNode(node); } // Don't trigger body touchstart event when touching link e.stopPropagation(); }.bind(this)); } DtHoverBox.prototype.bindDivEvents = function bindDivEvents(){ // For mice, same behavior as hovering on links this.div.addEventListener(\"mouseover\", function(){ if (!this.visible) this.showAtNode(node); this.stopTimeout(); }.bind(this)); this.div.addEventListener(\"mouseout\", function(){this.extendTimeout(250);}.bind(this)); // Don't trigger body touchstart event when touching within box this.div.addEventListener(\"touchstart\", function(e){e.stopPropagation();}); // Close box when touching outside box document.body.addEventListener(\"touchstart\", function(){this.hide();}.bind(this)); } var hover_es = document.querySelectorAll(\"span[data-hover-ref]\"); hover_es = [].slice.apply(hover_es); hover_es.forEach(function(e,n){ var ref_id = e.getAttribute(\"data-hover-ref\"); DtHoverBox.get_box(ref_id).bind(e); })"},{"title":"","date":"2018-07-05T21:24:40.842Z","updated":"2018-07-05T21:24:40.842Z","comments":true,"path":"css/tsne-how_use/main.css","permalink":"https://www.xunhanliu.top/css/tsne-how_use/main.css","excerpt":"","text":"#playground { overflow: hidden; font-family: 'Open Sans', sans-serif; border-top: 1px solid rgba(0, 0, 0, 0.1); /*border-bottom: 1px solid rgba(0, 0, 0, 0.1);*/ margin-top: 36px; padding: 36px 0 0 0; /*background: #fcfcfc;*/ z-index: 1000; } #playground * { box-sizing: border-box; } #playground.modal { position: fixed; left: 10px; right: 10px; top: 50px; } /* Playground Canvas */ #playground-canvas { float: left; width: 55%; } #playground-canvas canvas { width: 100%; } /* Data Menu */ #data-menu { /*float: left;*/ /*width: 25%*/ width: 40%; float: left; margin-bottom: 24px; overflow: hidden; margin-left: 5%; } #data-menu .demo-data { cursor: pointer; position: relative; font-size: 10px; line-height: 1.2em; box-sizing: border-box; float: left; margin: 2px; padding: 4px; width: calc(33% - 4px); background: white; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 4px; box-shadow: 0 0 3px rgba(0, 0, 0, 0.08); } @media(min-width: 480px) { #data-menu .demo-data { width: calc(25% - 8px); padding: 8px; margin: 4px; } } @media(min-width: 768px) { #data-menu .demo-data { width: calc(16.5% - 8px); padding: 8px; margin: 4px; } } #data-menu .demo-data:hover { border: 1px solid rgba(0, 0, 0, 0.2); } #data-menu .demo-data.selected::after { content: \"\"; border: 2px solid rgba(70, 130, 180, 0.8); width: 100%; height: 100%; position: absolute; top: 0; left: 0; box-sizing: border-box; border-radius: 4px; } #data-menu .demo-data span { display: none; } #data-menu .demo-data:hover canvas { opacity: 1; } #data-menu .demo-data canvas { width: 100%; opacity: 0.3; } #data-menu .demo-data.selected canvas { opacity: 1; } /* Data Details */ #data-details { position: relative; } @media(min-width: 768px) { #data-details { width: 40%; float: right; } } #data-details #data-controls { width: 40%; float: right; position: relative; overflow: hidden; font-size: 13px; } @media(min-width: 768px) { #data-details #data-controls { width: 50%; margin-right: 10%; float: left; } } #data-details #play-controls { margin-bottom: 18px; overflow: hidden; position: relative; } #data-details #play-controls button { cursor: pointer; outline: none; border-radius: 50%; background: steelblue; color: white; width: 25%; margin-right: 5%; padding-top: 25%; padding-bottom: 0; border: none; float: left; position: relative; } #play-controls i { display: block; position: absolute; top: 50%; left: 0; width: 100%; height: 36px; font-size: 24px; line-height: 0; } @media(min-width: 768px) { #play-controls i { font-size: 30px; } } #play-controls #play-pause i { display: none; position: absolute; } #play-controls #play-pause.paused i:nth-child(1) { display: block; } #play-controls #play-pause.playing i:nth-child(2) { display: block; } #steps-display { float: left; text-align: center; width: 25%; line-height: 1.5em; font-size: 13px; } @media(min-width: 1024px) { #steps-display { font-size: 16px; line-height: 1.6em; } } #data-details #data-description { width: 50%; margin-right: 10%; float: right; font-size: 14px; line-height: 1.6em; } @media(min-width: 768px) { #data-details #data-description { width: 40%; float: left; margin-right: 0; } } /* Options 主图1*/ #data-details #options { float: left; padding-left: 36px; font-size: 13px; line-height: 1.5em; width: 45%; } #data-details input { display: block; width: 100%; margin: 8px 0 16px 0; } #options #data-options { width: 45%; margin-left: 4px; } #options #tsne-options { width: 45%; margin-left: 4px; } #data-details #share { margin-top: 8px; display: block; color: rgba(0, 0, 0, 0.4); text-decoration: none; font-size: 12px; } #data-details #share:hover { text-decoration: underline; } #data-details #share i { line-height: 0px; position: relative; top: 7px; }"},{"title":"","date":"2018-07-05T21:39:16.269Z","updated":"2018-07-05T21:39:16.269Z","comments":true,"path":"css/tsne-how_use/main.js","permalink":"https://www.xunhanliu.top/css/tsne-how_use/main.js","excerpt":"","text":"// This depends on playground.js having setup the GLOBAL object function runTrayState() { // Set up t-SNE and start it running. var state = GLOBALS.trayState; var points = state.demo.generator.apply(null, state.demoParams); var canvas = d3.select(\"#tray-content canvas\").node() // if there was already a playground demo going, lets destroy it and make a new one if(GLOBALS.trayDemo) { GLOBALS.trayDemo.destroy(); delete GLOBALS.trayDemo; } GLOBALS.trayDemo = demoMaker(points, canvas, state, function(step) { d3.select(\"#tray-controls .step\").text(step); if(step >= state.stepLimit && !GLOBALS.trayUnpausedBefore) { setTrayRunning(false) } }) GLOBALS.trayUnpausedBefore = false; setTrayRunning(true); } function updateTraySliders() { // we regenerate all the sliders from scratch // we modify the global tray state when a slider is modified var state = GLOBALS.trayState; var dataSliders = d3.select('#tray-data-sliders'); dataSliders.html(''); state.demo.options.map(function(option, i) { var value = state.demoParams[i]; var slider = makeTraySlider(dataSliders.node(), option.name, option.min, option.max, value, function() { // when this one updates we change the appropriate state GLOBALS.trayState.demoParams[i] = +slider.value runTrayState(); }); }); var tsneSliders = d3.select('#tray-tsne-sliders'); tsneSliders.html(''); var perpSlider = makeTraySlider(tsneSliders.node(), \"Perplexity\", 1, 100, state.perplexity, function() { GLOBALS.trayState.perplexity = perpSlider.value runTrayState(); }); var epsSlider = makeTraySlider(tsneSliders.node(), \"Epsilon\", 1, 20, state.epsilon, function() { GLOBALS.trayState.epsilon = epsSlider.value runTrayState(); }); } function makeTraySlider(container, name, min, max, start, changeCallback) { var dis = d3.select(container) dis.append(\"span\").classed(\"slider-label-\" + name, true) .text(name + ' ') var value = dis.append(\"span\").classed(\"slider-value-\" + name, true) .text(start) var slider = dis.append(\"input\") .attr(\"type\", \"range\") .attr(\"min\", min) .attr(\"max\", max) .attr(\"value\", start) .on(\"change\", changeCallback) .on(\"input\", function() { value.text(slider.node().value); }) return slider.node(); } /* Activate the tray */ function updateStateFromFigure(figure, example, el) { var y = el.getBoundingClientRect().top; var demo = demosByName[figure.dataset]; var state = { demo: demos[demo.index], demoParams: figure.params.map(function(d) { return d}), perplexity: example.perplexity, epsilon: example.epsilon, stepLimit: example.step } GLOBALS.trayState = state; runTrayState() updateTraySliders() d3.select(\"#tray-container\").classed(\"modal\", true) GLOBALS.trayOpen = true; } d3.select(\"body\").on(\"keydown\", function() { if(d3.event.keyCode === 27) { setTrayRunning(false) d3.select(\"#tray-container\").classed(\"modal\", false); d3.selectAll(\".runner\").classed(\"selected\", false); } }) d3.select(\"#tray-close\").on(\"click\", function() { setTrayRunning(false); GLOBALS.trayOpen = false; d3.select(\"#tray-container\").classed(\"modal\", false) d3.selectAll(\".runner\").classed(\"selected\", false); }) /* Tray Controls */ var trayPlay = d3.select(\"#tray-controls .play-pause\") function setTrayRunning(r) { GLOBALS.running = r; if (GLOBALS.running) { GLOBALS.trayDemo.unpause(); trayPlay .classed(\"playing\", true) .classed(\"paused\", false); } else { GLOBALS.trayDemo.pause(); trayPlay .classed(\"playing\", false) .classed(\"paused\", true); } } // Hook up play / pause / restart buttons. trayPlay.on(\"click\", function() { GLOBALS.trayUnpausedBefore = true; setTrayRunning(!GLOBALS.running); }); var trayRestart = d3.select(\"#tray-controls .restart\") .on(\"click\", function() { runTrayState(); }) d3.select(window).on(\"scroll.tray\", function() { if(GLOBALS.trayOpen) { if(scrollY < 1000) { setTrayRunning(false); GLOBALS.trayOpen = false; d3.select(\"#tray-container\").classed(\"modal\", false); d3.selectAll(\".runner\").classed(\"selected\", false); } } });"},{"title":"","date":"2018-07-05T13:13:33.754Z","updated":"2018-07-05T13:06:29.131Z","comments":true,"path":"css/tsne-how_use/material-icons.css","permalink":"https://www.xunhanliu.top/css/tsne-how_use/material-icons.css","excerpt":"","text":"@font-face { font-family: 'Material Icons'; font-style: normal; font-weight: 400; src: local('Material Icons'), local('MaterialIcons-Regular'), url(MaterialIcons-Regular.woff) format('woff'); } .material-icons { font-family: 'Material Icons'; font-weight: normal; font-style: normal; font-size: 24px; /* Preferred icon size */ display: inline-block; line-height: 1; text-transform: none; letter-spacing: normal; word-wrap: normal; white-space: nowrap; direction: ltr; /* Support for all WebKit browsers. */ -webkit-font-smoothing: antialiased; /* Support for Safari and Chrome. */ text-rendering: optimizeLegibility; /* Support for Firefox. */ -moz-osx-font-smoothing: grayscale; /* Support for IE. */ font-feature-settings: 'liga'; }"},{"title":"","date":"2018-07-05T13:13:33.697Z","updated":"2018-07-05T13:06:26.122Z","comments":true,"path":"js/tsne-how_use/figure-configs.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/figure-configs.js","excerpt":"","text":"var figures = [ { id: \"01\", params: [50, 2], dataset: \"Two Clusters\", no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"02\", params: [50, 2], dataset: \"Two Clusters\", no3d: true, examples: [ { id: \"01\", perplexity: 30, epsilon: 10, dim: 2, step: 10 }, { id: \"02\", perplexity: 30, epsilon: 10, dim: 2, step: 20 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 60}, { id: \"04\", perplexity: 30, epsilon: 10, dim: 2, step: 120 }, { id: \"05\", perplexity: 30, epsilon: 10, dim: 2, step: 1000 }, ] }, { id: \"03\", params: [75, 2], dataset: 'Two Different-Sized Clusters', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"04\", params: [50, 2], dataset: 'Three Clusters', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"05\", params: [200, 2], dataset: 'Three Clusters', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"06\", params: [500, 100], dataset: 'Gaussian Cloud', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"07\", params: [100, 50], dataset: 'Ellipsoidal Gaussian Cloud', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"08\", params: [75, 2], dataset: 'Two Long Linear Clusters', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"09\", params: [75, 50], dataset: 'Cluster In Cluster', no3d: true, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"10\", params: [100], dataset: 'Linked Rings', no3d: false, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"11\", params: [150], dataset: 'Trefoil Knot', no3d: false, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 5, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 30, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 100, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"12\", params: [100], dataset: 'Trefoil Knot', no3d: false, examples: [ { id: \"01\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 2, epsilon: 10, dim: 2, step: 5000 }, ] }, { id: \"13\", params: [100], dataset: 'Trefoil Knot', no3d: false, examples: [ { id: \"01\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"02\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"03\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"04\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, { id: \"05\", perplexity: 50, epsilon: 10, dim: 2, step: 5000 }, ] }, ] if(typeof module != \"undefined\") module.exports = figures;"},{"title":"","date":"2018-07-05T13:13:26.814Z","updated":"2018-07-05T13:06:27.132Z","comments":true,"path":"js/tsne-how_use/playground.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/playground.js","excerpt":"","text":"/** * @fileoverview Demo that helps explain what t-SNE is doing. * In particular, shows how various geometries translate to a 2D map, * and lets you play with the perplexity hyperparameter. * * None of this is optimized code, because it doesn't seem necessary * for the small cases we're considering. */ // Copyright 2018 Google LLC // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. // Global variable for whether we should keep optimizing. var playgroundThread = 0; var GLOBALS = { playgroundDemo: null, // the object to control running the playground simulation trayDemo: null, // the object to control running the tray simulation running: true, unpausedBefore: false, stepLimit: 5000, state: {}, showDemo: null, perplexitySlider: null, epsilonSlider: null, } main(); // Main entry point. function main() { // Set state from hash. var format = d3.format(\",\"); function setStateFromParams() { var params = {}; window.location.hash.substring(1).split('&').forEach(function(p) { var tokens = p.split('='); params[tokens[0]] = tokens[1]; }); function getParam(key, fallback) { return params[key] === undefined ? fallback : params[key]; } GLOBALS.state = { perplexity: +getParam('perplexity', 10), epsilon: +getParam('epsilon', 5), demo: +getParam('demo', 0), demoParams: getParam('demoParams', '20,2').split(',').map(Number) }; } setStateFromParams(); // Utility function for creating value sliders. function makeSlider(container, name, min, max, start) { var dis = d3.select(container) dis.append(\"span\").classed(\"slider-label-\" + name, true) .text(name + ' ') var value = dis.append(\"span\").classed(\"slider-value-\" + name, true) .text(start) var slider = dis.append(\"input\") .attr(\"type\", \"range\") .attr(\"min\", min) .attr(\"max\", max) .attr(\"value\", start) .on(\"change\", updateParameters) .on(\"input\", function() { value.text(slider.node().value); }) return slider.node(); } // Create menu of possible demos. var menuDiv = d3.select(\"#data-menu\"); var dataMenus = menuDiv.selectAll(\".demo-data\") .data(demos) .enter().append(\"div\") .classed(\"demo-data\", true) .on(\"click\", function(d,i) { showDemo(i); }); dataMenus.append(\"canvas\") .attr(\"width\", 150) .attr(\"height\", 150) .each(function(d,i) { var demo = demos[i]; var params = [demo.options[0].start] if(demo.options[1]) params.push(demo.options[1].start) var points = demo.generator.apply(null, params); var canvas = d3.select(this).node() visualize(points, canvas, null, null) }); dataMenus.append(\"span\") .text(function(d) { return d.name}); // Set up t-SNE UI. var tsneUI = document.getElementById('tsne-options'); var perplexitySlider = makeSlider(tsneUI, 'Perplexity', 2, 100, GLOBALS.state.perplexity); var epsilonSlider = makeSlider(tsneUI, 'Epsilon', 1, 20, GLOBALS.state.epsilon); GLOBALS.perplexitySlider = perplexitySlider GLOBALS.epsilonSlider = epsilonSlider // Controls for data options. var optionControls; var demo; function updateParameters() { GLOBALS.state.demoParams = optionControls.map(function(s) {return s.value;}); GLOBALS.state.perplexity = perplexitySlider.value; GLOBALS.state.epsilon = epsilonSlider.value; d3.select(\"#share\").style(\"display\", \"\") .attr(\"href\", \"#\" + generateHash()) runState(); } function generateHash() { function stringify(map) { var s = ''; for (key in map) { s += '&' + key + '=' + map[key]; } return s.substring(1); } //window.location.hash = stringify(GLOBALS.state); return stringify(GLOBALS.state); } function runState() { // Set up t-SNE and start it running. var points = demo.generator.apply(null, GLOBALS.state.demoParams); var canvas = document.getElementById('output'); // if there was already a playground demo going, lets destroy it and make a new one if(GLOBALS.playgroundDemo) { GLOBALS.playgroundDemo.destroy(); delete GLOBALS.playgroundDemo; } //runPlayground(points, canvas, GLOBALS.state, function(step) { GLOBALS.playgroundDemo = demoMaker(points, canvas, GLOBALS.state, function(step) { d3.select(\"#step\").text(format(step)); if(step >= GLOBALS.stepLimit && !GLOBALS.unpausedBefore) { setRunning(false) } }) GLOBALS.unpausedBefore = false; setRunning(true); } var playPause = document.getElementById('play-pause'); function setRunning(r) { GLOBALS.running = r; GLOBALS.playgroundRunning = r; if (GLOBALS.running) { GLOBALS.playgroundDemo.unpause(); playPause.setAttribute(\"class\", \"playing\") } else { GLOBALS.playgroundDemo.pause(); playPause.setAttribute(\"class\", \"paused\") } } // Hook up play / pause / restart buttons. playPause.onclick = function() { GLOBALS.unpausedBefore = true; setRunning(!GLOBALS.running); }; document.getElementById('restart').onclick = updateParameters; // Show a given demo. GLOBALS.showDemo = showDemo; function showDemo(index, initializeFromState) { GLOBALS.state.demo = index; demo = demos[index]; // Show description of demo data. //document.querySelector('#data-description span').textContent = demo.description; d3.select(\"#data-description span\").text(demo.description) // Create UI for the demo data options. var dataOptionsArea = document.getElementById('data-options'); dataOptionsArea.innerHTML = ''; optionControls = demo.options.map(function(option, i) { var value = initializeFromState ? GLOBALS.state.demoParams[i] : option.start; return makeSlider(dataOptionsArea, option.name, option.min, option.max, value); }); menuDiv.selectAll(\".demo-data\") .classed(\"selected\", false) .filter(function(d,i) { return i === index }) .classed(\"selected\", true) updateParameters(); } // run initial demo; setTimeout(function() { showDemo(GLOBALS.state.demo, true); // hide the share link initially d3.select(\"#share\").style(\"display\", \"none\") },1); d3.select(window).on(\"popstate\", function() { setTimeout(function() { //updateParameters(); setStateFromParams(); showDemo(GLOBALS.state.demo, true) },1) }) d3.select(window).on(\"scroll.playground\", function() { if(scrollY > 1000) { if(GLOBALS.playgroundRunning) { setRunning(false); } } else { if(!GLOBALS.playgroundRunning) { // setRunning(true) } } }) }"},{"title":"","date":"2018-07-05T13:13:26.775Z","updated":"2018-07-05T13:06:26.594Z","comments":true,"path":"js/tsne-how_use/figures.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/figures.js","excerpt":"","text":"/* Configurations and utility functions for figures */ // Copyright 2018 Google LLC // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. if(typeof require != \"undefined\") { // hack for loading from generator var d3 = require('./d3.min.js') var visualize = require('./visualize.js').visualize var tsnejs = require('./tsne.js') var demoConfigs = require('./demo-configs.js') var distanceMatrix = demoConfigs.distanceMatrix var Point = demoConfigs.Point } var FIGURES = { width: 150, height: 150, downscaleWidth: 300, downscaleHeight: 300, } function getPoints(demo, params) { if(!params) { params = [demo.options[0].start] if(demo.options[1]) params.push(demo.options[1].start) } var points = demo.generator.apply(null, params); return points; } function renderDemoInitial(demo, params, canvas) { visualize(points, canvas, null, null) } /* var demoTimescale = d3.scaleLinear() .domain([0, 200, 6000]) .range([20, 10, 0]) */ var timescale = d3.scaleLinear() .domain([0, 20, 50, 100, 200, 6000]) .range([60, 30, 20, 10, 0]); function demoMaker(points, canvas, options, stepCb) { var demo = {}; var paused = false; var step = 0; var chunk = 1; var frameId; var tsne = new tsnejs.tSNE(options); var dists = distanceMatrix(points); tsne.initDataDist(dists); function iterate() { if(paused) return; // control speed at which we iterate if(step >= 200) chunk = 10; for(var k = 0; k < chunk; k++) { tsne.step(); ++step; } //inform the caller about the current step stepCb(step) // update the solution and render var solution = tsne.getSolution().map(function(coords, i) { return new Point(coords, points[i].color); }); visualize(solution, canvas, \"\"); //removed message //control the loop. var timeout = timescale(step) setTimeout(function() { frameId = window.requestAnimationFrame(iterate); }, timeout) } demo.pause = function() { if(paused) return; // already paused paused = true; window.cancelAnimationFrame(frameId) } demo.unpause = function() { if(!paused) return; // already unpaused paused = false; iterate(); } demo.paused = function() { return paused; } demo.destroy = function() { demo.pause(); delete demo; } iterate(); return demo; } function runDemoSync(points, canvas, options, stepLimit, no3d) { var tsne = new tsnejs.tSNE(options); var dists = distanceMatrix(points); tsne.initDataDist(dists); var step = 0; for(var k = 0; k < stepLimit; k++) { if(k % 100 === 0) console.log(\"step\", step) tsne.step(); ++step; } var solution = tsne.getSolution().map(function(coords, i) { return new Point(coords, points[i].color); }); visualize(solution, canvas, \"\", no3d); //removed message return step; } if(typeof module != \"undefined\") module.exports = { demoMaker: demoMaker, runDemoSync: runDemoSync, getPoints: getPoints, FIGURES: FIGURES }"},{"title":"","date":"2018-07-05T13:13:26.826Z","updated":"2018-07-05T13:06:25.663Z","comments":true,"path":"js/tsne-how_use/demo-configs.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/demo-configs.js","excerpt":"","text":"/** * @fileoverview Synthetic data sets for t-SNE demo and visualizations, * along with some utility functions. */ // Copyright 2018 Google LLC // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. if(typeof require != \"undefined\") { // hack for loading from generator var d3 = require('./d3.min.js') } // Euclidean distance. function dist(a, b) { var d = 0; for (var i = 0; i < a.length; i++) { d += (a[i] - b[i]) * (a[i] - b[i]); } return Math.sqrt(d); } // Gaussian generator, mean = 0, std = 1. var normal = d3.randomNormal(); // Create random Gaussian vector. function normalVector(dim) { var p = []; for (var j = 0; j < dim; j++) { p[j] = normal(); } return p; } // Scale the given vector. function scale(vector, a) { for (var i = 0; i < vector.length; i++) { vector[i] *= a; } } // Add two vectors. function add(a, b) { var n = a.length; var c = []; for (var i = 0; i < n; i++) { c[i] = a[i] + b[i]; } return c; } // A point with color info. var Point = function(coords, color) { this.coords = coords; this.color = color || '#039'; }; // Adds colors to points depending on 2D location of original. function addSpatialColors(points) { var xExtent = d3.extent(points, function(p) {return p.coords[0]}); var yExtent = d3.extent(points, function(p) {return p.coords[1]}); var xScale = d3.scaleLinear().domain(xExtent).range([0, 255]); var yScale = d3.scaleLinear().domain(yExtent).range([0, 255]); points.forEach(function(p) { var c1 = ~~xScale(p.coords[0]); var c2 = ~~yScale(p.coords[1]); p.color = 'rgb(20,' + c1 + ',' + c2 + ')'; }); } // Convenience function to wrap 2d arrays as Points, using a default // color scheme. function makePoints(originals) { var points = originals.map(function(p) {return new Point(p);}); addSpatialColors(points); return points; } // Creates distance matrix for t-SNE input. function distanceMatrix(points) { var matrix = []; var n = points.length; for (var i = 0; i < n; i++) { for (var j = 0; j < n; j++) { matrix.push(dist(points[i].coords, points[j].coords)); } } return matrix; } // Data in shape of 2D grid. function gridData(size) { var points = []; for (var x = 0; x < size; x++) { for (var y = 0; y < size; y++) { points.push([x, y]); } } return makePoints(points); } // Gaussian cloud, symmetric, of given dimension. function gaussianData(n, dim) { var points = []; for (var i = 0; i < n; i++) { var p = normalVector(dim); points.push(new Point(p)); } return points; } // Elongated Gaussian ellipsoid. function longGaussianData(n, dim) { var points = []; for (var i = 0; i < n; i++) { var p = normalVector(dim); for (var j = 0; j < dim; j++) { p[j] /= (1 + j); } points.push(new Point(p)); } return points; } // Return a color for the given angle. function angleColor(t) { var hue = ~~(300 * t / (2 * Math.PI)); return 'hsl(' + hue + ',50%,50%)'; } // Data in a 2D circle, regularly spaced. function circleData(numPoints) { var points = []; for (var i = 0; i < numPoints; i++) { var t = 2 * Math.PI * i / numPoints; points.push(new Point([Math.cos(t), Math.sin(t)], angleColor(t))); } return points; } // Random points on a 2D circle. function randomCircleData(numPoints) { var points = []; for (var i = 0; i < numPoints; i++) { var t = 2 * Math.PI * Math.random(); points.push(new Point([Math.cos(t), Math.sin(t)], angleColor(t))); } return points; } // Clusters arranged in a circle. function randomCircleClusterData(numPoints) { var points = []; for (var i = 0; i < numPoints; i++) { var t = 2 * Math.PI * i / numPoints;//Math.random(); var color = angleColor(t); for (var j = 0; j < 20; j++) { var x = Math.cos(t) + .01 * normal(); var y = Math.sin(t) + .01 * normal(); points.push(new Point([x, y], color)); } } return points; } // Two 2D clusters of different sizes. function twoDifferentClustersData2D(n) { var points = []; for (var i = 0; i < n; i++) { points.push(new Point([10 * normal(), 10 * normal()], '#039')); points.push(new Point([100 + normal(), normal()], '#f90')); } return points; } // Two clusters of the same size. function twoClustersData(n, dim) { dim = dim || 50; var points = []; for (var i = 0; i < n; i++) { points.push(new Point(normalVector(dim), '#039')); var v = normalVector(dim); v[0] += 10; points.push(new Point(v, '#f90')); } return points; } // Two differently sized clusters, of arbitrary dimensions. function twoDifferentClustersData(n, dim, scale) { dim = dim || 50; scale = scale || 10; var points = []; for (var i = 0; i < n; i++) { points.push(new Point(normalVector(dim), '#039')); var v = normalVector(dim); for (var j = 0; j < dim; j++) { v[j] /= scale; } v[0] += 20; points.push(new Point(v, '#f90')); } return points; } // Three clusters, at different distances from each other, in 2D function threeClustersData2d(n) { var points = []; for (var i = 0; i < n; i++) { points.push(new Point([normal(), normal()], '#039')); points.push(new Point([10 + normal(), normal()], '#f90')); points.push(new Point([50 + normal(), normal()], '#6a3')); } return points; } // Three clusters, at different distances from each other, in any dimension. function threeClustersData(n, dim) { dim = dim || 50; var points = []; for (var i = 0; i < n; i++) { var p1 = normalVector(dim); points.push(new Point(p1, '#039')); var p2 = normalVector(dim); p2[0] += 10; points.push(new Point(p2, '#f90')); var p3 = normalVector(dim); p3[0] += 50; points.push(new Point(p3, '#6a3')); } return points; } // One tiny cluster inside of a big cluster. function subsetClustersData(n, dim) { dim = dim || 2; var points = []; for (var i = 0; i < n; i++) { var p1 = normalVector(dim); points.push(new Point(p1, '#039')); var p2 = normalVector(dim); scale(p2, 50); points.push(new Point(p2, '#f90')); } return points; } // Data in a rough simplex. function simplexData(n, noise) { noise = noise || 0.5; var points = []; for (var i = 0; i < n; i++) { var p = []; for (var j = 0; j < n; j++) { p[j] = i == j ? 1 + noise * normal() : 0; } points.push(new Point(p)); } return points; } // Uniform points from a cube. function cubeData(n, dim) { var points = []; for (var i = 0; i < n; i++) { var p = []; for (var j = 0; j < dim; j++) { p[j] = Math.random(); } points.push(new Point(p)); } return points; } // Points in two unlinked rings. function unlinkData(n) { var points = []; function rotate(x, y, z) { var u = x; var cos = Math.cos(.4); var sin = Math.sin(.4); var v = cos * y + sin * z; var w = -sin * y + cos * z; return [u, v, w]; } for (var i = 0; i < n; i++) { var t = 2 * Math.PI * i / n; var sin = Math.sin(t); var cos = Math.cos(t); // Ring 1. points.push(new Point(rotate(cos, sin, 0), '#f90')); // Ring 2. points.push(new Point(rotate(3 + cos, 0, sin), '#039')); } return points; } // Points in linked rings. function linkData(n) { var points = []; function rotate(x, y, z) { var u = x; var cos = Math.cos(.4); var sin = Math.sin(.4); var v = cos * y + sin * z; var w = -sin * y + cos * z; return [u, v, w]; } for (var i = 0; i < n; i++) { var t = 2 * Math.PI * i / n; var sin = Math.sin(t); var cos = Math.cos(t); // Ring 1. points.push(new Point(rotate(cos, sin, 0), '#f90')); // Ring 2. points.push(new Point(rotate(1 + cos, 0, sin), '#039')); } return points; } // Points in a trefoil knot. function trefoilData(n) { var points = []; for (var i = 0; i < n; i++) { var t = 2 * Math.PI * i / n; var x = Math.sin(t) + 2 * Math.sin(2 * t); var y = Math.cos(t) - 2 * Math.cos(2 * t); var z = -Math.sin(3 * t); points.push(new Point([x, y, z], angleColor(t))); } return points; } // Two long, linear clusters in 2D. function longClusterData(n) { var points = []; var s = .03 * n; for (var i = 0; i < n; i++) { var x1 = i + s * normal(); var y1 = i + s * normal(); points.push(new Point([x1, y1], '#039')); var x2 = i + s * normal() + n / 5; var y2 = i + s * normal() - n / 5; points.push(new Point([x2, y2], '#f90')); } return points; } // Mutually orthogonal steps. function orthoCurve(n) { var points = []; for (var i = 0; i < n; i++) { var coords = []; for (var j = 0; j < n; j++) { coords[j] = j < i ? 1 : 0; } var t = 1.5 * Math.PI * i / n; points.push(new Point(coords, angleColor(t))); } return points; } // Random walk function randomWalk(n, dim) { var points = []; var current = []; for (var i = 0; i < dim; i++) { current[i] = 0; } for (var i = 0; i < n; i++) { var step = normalVector(dim); var next = current.slice(); for (var j = 0; j < dim; j++) { next[j] = current[j] + step[j]; } var t = 1.5 * Math.PI * i / n; points.push(new Point(next, angleColor(t))); current = next; } return points; } // Random jump: a random walk with // additional noise added at each step. function randomJump(n, dim) { var points = []; var current = []; for (var i = 0; i < dim; i++) { current[i] = 0; } for (var i = 0; i < n; i++) { var step = normalVector(dim); var next = add(step, current.slice()); var r = normalVector(dim); scale(r, Math.sqrt(dim)); var t = 1.5 * Math.PI * i / n; var coords = add(r, next); points.push(new Point(coords, angleColor(t))); current = next; } return points; } /** * @fileoverview Demo configuration for t-SNE playground. */ var demos = [ { name: 'Grid', description: 'A square grid with equal spacing between points. ' + 'Try convergence at different sizes.', options: [ { name: 'Points Per Side', min: 2, max: 20, start: 10, } ], generator: gridData }, { name: 'Two Clusters', description: 'Two clusters with equal numbers of points.', options: [ { name: 'Points Per Cluster', min: 1, max: 100, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, } ], generator: twoClustersData }, { name: 'Three Clusters', description: 'Three clusters with equal numbers of points, but at ' + 'different distances from each other. Cluster distances are ' + 'only apparent at certain perplexities', options: [ { name: 'Points Per Cluster', min: 1, max: 100, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, } ], generator: threeClustersData }, { name: 'Two Different-Sized Clusters', description: 'Two clusters with equal numbers of points, but different ' + 'variances within the clusters. Cluster separation depends on perplexity.', options: [ { name: 'Points Per Cluster', min: 1, max: 100, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, }, { name: 'Scale', min: 1, max: 10, start: 5, } ], generator: twoDifferentClustersData }, { name: 'Two Long Linear Clusters', description: 'Two sets of points, arranged in parallel lines that ' + 'are close to each other. Note curvature of lines.', options: [ { name: 'Points Per Cluster', min: 1, max: 100, start: 50, } ], generator: longClusterData }, { name: 'Cluster In Cluster', description: 'A dense, tight cluster inside of a wide, sparse cluster. ' + 'Perplexity makes a big difference here.', options: [ { name: 'Points Per Cluster', min: 1, max: 100, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, } ], generator: subsetClustersData }, { name: 'Circle (Evenly Spaced)', description: 'Points evenly distributed in a circle. ' + 'Hue corresponds to angle in the circle.', options: [ { name: 'Number Of Points', min: 1, max: 100, start: 50, } ], generator: circleData }, { name: 'Circle (Randomly Spaced)', description: 'Points randomly distributed in a circle. ' + 'Hue corresponds to angle in the circle.', options: [ { name: 'Number Of Points', min: 1, max: 100, start: 50, } ], generator: randomCircleData }, { name: 'Gaussian Cloud', description: 'Points in a unit Gaussian distribution. ' + 'Data is entirely random, so any visible subclusters are ' + 'not statistically significant', options: [ { name: 'Number Of Points', min: 1, max: 500, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, } ], generator: gaussianData }, { name: 'Ellipsoidal Gaussian Cloud', description: 'Points in an ellipsoidal Gaussian distribution. ' + ' Dimension n has variance 1/n. Elongation is visible in plot.', options: [ { name: 'Number Of Points', min: 1, max: 500, start: 50, }, { name: 'Dimensions', min: 1, max: 100, start: 2, } ], generator: longGaussianData }, { name: 'Trefoil Knot', description: 'Points arranged in 3D, following a trefoil knot. ' + 'Different runs may give different results.', options: [ { name: 'Number Of Points', min: 1, max: 200, start: 50, } ], generator: trefoilData }, { name: 'Linked Rings', description: 'Points arranged in 3D, on two linked circles. ' + 'Different runs may give different results.', options: [ { name: 'Number Of Points', min: 1, max: 200, start: 50, } ], generator: linkData }, { name: 'Unlinked Rings', description: 'Points arranged in 3D, on two unlinked circles', options: [ { name: 'Number Of Points', min: 1, max: 200, start: 50, } ], generator: unlinkData }, { name: 'Orthogonal Steps', description: 'Points related by mutually orthogonal steps. ' + 'Very similar to a random walk.', options: [ { name: 'Number Of Points', min: 1, max: 500, start: 50, } ], generator: orthoCurve }, { name: 'Random Walk', description: 'Random (Gaussian) walk. ' + 'Smoother than you might think.', options: [{ name: 'Number Of Points', min: 1, max: 1000, start: 100, }, { name: 'Dimension', min: 1, max: 1000, start: 100, } ], generator: randomWalk }, { name: 'Random Jump', description: 'Random (Gaussian) Jump', options: [ { name: 'Number Of Points', min: 1, max: 1000, start: 100, }, { name: 'Dimension', min: 1, max: 1000, start: 100, } ], generator: randomJump }, { name: 'Equally Spaced', description: 'A set of points, where distances between all pairs of ' + 'points are the same in the original space.', options: [ { name: 'Number Of Points', min: 2, max: 100, start: 50, } ], generator: simplexData }, { name: 'Uniform Distribution', description: 'Points uniformly distributed in a unit cube.', options: [ { name: 'Number Of Points', min: 2, max: 200, start: 50, }, { name: 'Dimensions', min: 1, max: 10, start: 3, } ], generator: cubeData } ]; var demosByName = {} demos.forEach(function(d, i) { d.index = i; demosByName[d.name] = d; }) if(typeof module != \"undefined\") module.exports = { demos: demos, demosByName: demosByName, distanceMatrix: distanceMatrix, Point: Point };"},{"title":"","date":"2018-07-05T13:13:26.735Z","updated":"2018-07-05T13:06:24.856Z","comments":true,"path":"js/tsne-how_use/tsne.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/tsne.js","excerpt":"","text":"'use strict'; /** @license * The MIT License (MIT) * Copyright (c) 2015 Andrej Karpathy * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the \"Software\"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */ //goog.provide('tsnejs'); /** * @type {string} */ //tsnejs.REVISION = 'ALPHA'; var tsnejs = {} // utility function var assert = function(condition, message) { if (!condition) { throw message || 'Assertion failed'; } }; // syntax sugar var getopt = function(opt, field, defaultval) { if (opt.hasOwnProperty(field)) { return opt[field]; } else { return defaultval; } }; // return 0 mean unit standard deviation random number var return_v = false; var v_val = 0.0; var gaussRandom = function(rng) { if (return_v) { return_v = false; return v_val; } var u = 2 * rng() - 1; var v = 2 * rng() - 1; var r = u * u + v * v; if (r == 0 || r > 1) return gaussRandom(rng); var c = Math.sqrt(-2 * Math.log(r) / r); v_val = v * c; // cache this for next function call for efficiency return_v = true; return u * c; }; // return random normal number var randn = function(rng, mu, std) { return mu + gaussRandom(rng) * std; }; // utilitity that creates contiguous vector of zeros of size n var zeros = function(n) { if (typeof(n) === 'undefined' || isNaN(n)) { return []; } if (typeof ArrayBuffer === 'undefined') { // lacking browser support var arr = new Array(n); for (var i = 0; i < n; i++) { arr[i] = 0; } return arr; } else { return new Float64Array(n); // typed arrays are faster } }; // utility that returns 2d array filled with random numbers from generator rng var randn2d = function(n, d, rng) { var x = []; for (var i = 0; i < n; i++) { var xhere = []; for (var j = 0; j < d; j++) { xhere.push(randn(rng, 0.0, 1e-4)); } x.push(xhere); } return x; }; // utility that returns 2d array filled with value s var arrayofs = function(n, d, s) { var x = []; for (var i = 0; i < n; i++) { var xhere = []; for (var j = 0; j < d; j++) { xhere.push(s); } x.push(xhere); } return x; }; // compute L2 distance between two vectors var L2 = function(x1, x2) { var D = x1.length; var d = 0; for (var i = 0; i < D; i++) { var x1i = x1[i]; var x2i = x2[i]; d += (x1i - x2i) * (x1i - x2i); } return d; }; // compute pairwise distance in all vectors in X var xtod = function(X) { var N = X.length; var dist = zeros(N * N); // allocate contiguous array for (var i = 0; i < N; i++) { for (var j = i + 1; j < N; j++) { var d = L2(X[i], X[j]); dist[i * N + j] = d; dist[j * N + i] = d; } } return dist; }; // compute (p_{i|j} + p_{j|i})/(2n) var d2p = function(D, perplexity, tol) { var Nf = Math.sqrt(D.length); // this better be an integer var N = Math.floor(Nf); assert(N === Nf, 'D should have square number of elements.'); var Htarget = Math.log(perplexity); // target entropy of distribution var P = zeros(N * N); // temporary probability matrix var prow = zeros(N); // a temporary storage compartment for (var i = 0; i < N; i++) { var betamin = -Infinity; var betamax = Infinity; var beta = 1; // initial value of precision var done = false; var maxtries = 50; // perform binary search to find a suitable precision beta // so that the entropy of the distribution is appropriate var num = 0; while (!done) { //debugger; // compute entropy and kernel row with beta precision var psum = 0.0; for (var j = 0; j < N; j++) { var pj = Math.exp(- D[i * N + j] * beta); if (i === j) { pj = 0; } // we dont care about diagonals prow[j] = pj; psum += pj; } // normalize p and compute entropy var Hhere = 0.0; for (var j = 0; j < N; j++) { var pj = prow[j] / psum; prow[j] = pj; if (pj > 1e-7) Hhere -= pj * Math.log(pj); } // adjust beta based on result if (Hhere > Htarget) { // entropy was too high (distribution too diffuse) // so we need to increase the precision for more peaky distribution betamin = beta; // move up the bounds if (betamax === Infinity) { beta = beta * 2; } else { beta = (beta + betamax) / 2; } } else { // converse case. make distrubtion less peaky betamax = beta; if (betamin === -Infinity) { beta = beta / 2; } else { beta = (beta + betamin) / 2; } } // stopping conditions: too many tries or got a good precision num++; if (Math.abs(Hhere - Htarget) < tol) { done = true; } if (num >= maxtries) { done = true; } } // copy over the final prow to P at row i for (var j = 0; j < N; j++) { P[i * N + j] = prow[j]; } } // end loop over examples i // symmetrize P and normalize it to sum to 1 over all ij var Pout = zeros(N * N); var N2 = N * 2; for (var i = 0; i < N; i++) { for (var j = 0; j < N; j++) { Pout[i * N + j] = Math.max((P[i * N + j] + P[j * N + i]) / N2, 1e-100); } } return Pout; }; // helper function function sign(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; } /** * @param {?Object} opt Options. * @constructor */ var tSNE = function(opt) { opt = opt || {}; this.perplexity = getopt(opt, 'perplexity', 30); this.dim = getopt(opt, 'dim', 2); // by default 2-D tSNE this.epsilon = getopt(opt, 'epsilon', 10); // learning rate this.rng = getopt(opt, 'rng', Math.random); this.iter = 0; }; tSNE.prototype = { // this function takes a set of high-dimensional points // and creates matrix P from them using gaussian kernel initDataRaw: function(X) { var N = X.length; var D = X[0].length; assert(N > 0, ' X is empty? You must have some data!'); assert(D > 0, ' X[0] is empty? Where is the data?'); var dists = xtod(X); // convert X to distances using gaussian kernel this.P = d2p(dists, this.perplexity, 1e-4); // attach to object this.N = N; // back up the size of the dataset this.initSolution(); // refresh this }, // this function takes a fattened distance matrix and creates // matrix P from them. // D is assumed to be provided as an array of size N^2. initDataDist: function(D) { var N = Math.sqrt(D.length); this.P = d2p(D, this.perplexity, 1e-4); this.N = N; this.initSolution(); // refresh this }, // (re)initializes the solution to random initSolution: function() { // generate random solution to t-SNE this.Y = randn2d(this.N, this.dim, this.rng); // the solution this.gains = arrayofs(this.N, this.dim, 1.0); // step gains // to accelerate progress in unchanging directions this.ystep = arrayofs(this.N, this.dim, 0.0); // momentum accumulator this.iter = 0; }, // return pointer to current solution getSolution: function() { return this.Y; }, // perform a single step of optimization to improve the embedding step: function() { this.iter += 1; var N = this.N; var cg = this.costGrad(this.Y); // evaluate gradient var cost = cg.cost; var grad = cg.grad; // perform gradient step var ymean = zeros(this.dim); for (var i = 0; i < N; i++) { for (var d = 0; d < this.dim; d++) { var gid = grad[i][d]; var sid = this.ystep[i][d]; var gainid = this.gains[i][d]; // compute gain update var newgain = sign(gid) === sign(sid) ? gainid * 0.8 : gainid + 0.2; if (newgain < 0.01) newgain = 0.01; // clamp this.gains[i][d] = newgain; // store for next turn // compute momentum step direction var momval = this.iter < 250 ? 0.5 : 0.8; var newsid = momval * sid - this.epsilon * newgain * grad[i][d]; this.ystep[i][d] = newsid; // remember the step we took // step! this.Y[i][d] += newsid; ymean[d] += this.Y[i][d]; // accumulate mean so that we // can center later } } // reproject Y to be zero mean for (var i = 0; i < N; i++) { for (var d = 0; d < this.dim; d++) { this.Y[i][d] -= ymean[d] / N; } } //if(this.iter%100===0) console.log('iter ' + this.iter + ', //cost: ' + cost); return cost; // return current cost }, // for debugging: gradient check debugGrad: function() { var N = this.N; var cg = this.costGrad(this.Y); // evaluate gradient var cost = cg.cost; var grad = cg.grad; var e = 1e-5; for (var i = 0; i < N; i++) { for (var d = 0; d < this.dim; d++) { var yold = this.Y[i][d]; this.Y[i][d] = yold + e; var cg0 = this.costGrad(this.Y); this.Y[i][d] = yold - e; var cg1 = this.costGrad(this.Y); var analytic = grad[i][d]; var numerical = (cg0.cost - cg1.cost) / (2 * e); console.log(i + ',' + d + ': gradcheck analytic: ' + analytic + ' vs. numerical: ' + numerical); this.Y[i][d] = yold; } } }, // return cost and gradient, given an arrangement costGrad: function(Y) { var N = this.N; var dim = this.dim; // dim of output space var P = this.P; var pmul = this.iter < 100 ? 4 : 1; // trick that helps with local optima // compute current Q distribution, unnormalized first var Qu = zeros(N * N); var qsum = 0.0; for (var i = 0; i < N; i++) { for (var j = i + 1; j < N; j++) { var dsum = 0.0; for (var d = 0; d < dim; d++) { var dhere = Y[i][d] - Y[j][d]; dsum += dhere * dhere; } var qu = 1.0 / (1.0 + dsum); // Student t-distribution Qu[i * N + j] = qu; Qu[j * N + i] = qu; qsum += 2 * qu; } } var cost = 0.0; var grad = []; for (var i = 0; i < N; i++) { var gsum = new Array(dim); // init grad for point i for (var d = 0; d < dim; d++) { gsum[d] = 0.0; } for (var j = 0; j < N; j++) { var normedProb = Math.max(Qu[i * N + j] / qsum, 1e-100); cost += - P[i * N + j] * Math.log(normedProb); // accumulate cost var premult = 4 * (pmul * P[i * N + j] - normedProb) * Qu[i * N + j]; for (var d = 0; d < dim; d++) { gsum[d] += premult * (Y[i][d] - Y[j][d]); } } grad.push(gsum); } return {cost: cost, grad: grad}; } }; tsnejs.tSNE = tSNE; // export tSNE class if(typeof module != \"undefined\") module.exports = tsnejs"},{"title":"","date":"2018-07-05T13:13:26.799Z","updated":"2018-07-05T13:06:26.581Z","comments":true,"path":"js/tsne-how_use/visualize.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/visualize.js","excerpt":"","text":"// Copyright 2018 Google LLC // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. if(typeof require != \"undefined\") { // hack for loading from generator var d3 = require('./d3.min.js') } // Helper function to draw a circle. // TODO: replace with canvas blitting for web rendering function circle(g, x, y, r) { g.beginPath(); g.arc(x, y, r, 0, 2 * Math.PI); g.fill(); g.stroke(); } // Visualize the given points with the given message. // If \"no3d\" is set, ignore the 3D cue for size. function visualize(points, canvas, message, no3d) { var width = canvas.width; var height = canvas.height; var g = canvas.getContext('2d'); g.fillStyle = 'white'; g.fillRect(0, 0, width, height); var xExtent = d3.extent(points, function(p) {return p.coords[0]}); var yExtent = d3.extent(points, function(p) {return p.coords[1]}); var zExtent = d3.extent(points, function(p) {return p.coords[2]}); var zScale = d3.scaleLinear().domain(zExtent).range([2, 10]); var centerX = (xExtent[0] + xExtent[1]) / 2; var centerY = (yExtent[0] + yExtent[1]) / 2; var scale = Math.min(width, height) / Math.max(xExtent[1] - xExtent[0], yExtent[1] - yExtent[0]); scale *= .9; // Leave a little margin. g.strokeStyle = 'rgba(255,255,255,.5)'; var is3d = !no3d && points[0].coords.length > 2; var index = []; var n = points.length; if (is3d) { for (var i = 0; i < n; i++) { index[i] = i; } index.sort(function(a, b) { return d3.ascending(points[a].coords[2], points[b].coords[2]); }); } for (var i = 0; i < n; i++) { var p = is3d ? points[index[i]] : points[i]; g.fillStyle = p.color; var x = (p.coords[0] - centerX) * scale + width / 2; var y = -(p.coords[1] - centerY) * scale + height / 2; var r = is3d ? zScale(p.coords[2]) : 4; circle(g, x, y, r); } if (message) { g.fillStyle = '#000'; g.font = '24pt Lato'; g.fillText(message, 8, 34); } } if(typeof module != \"undefined\") module.exports = { visualize: visualize }"},{"title":"","date":"2018-07-06T15:35:57.044Z","updated":"2018-07-06T15:35:57.044Z","comments":true,"path":"js/tsne-how_use/d3.min.js","permalink":"https://www.xunhanliu.top/js/tsne-how_use/d3.min.js","excerpt":"","text":"// https://d3js.org Version 4.13.0. Copyright 2018 Mike Bostock. (function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?n(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],n):n(t.d3=t.d3||{})})(this,function(t){\"use strict\";function n(t,n){return tn?1:t>=n?0:NaN}function e(t){return 1===t.length&&(t=function(t){return function(e,r){return n(t(e),r)}}(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r>>1;t(n[o],e)>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}function r(t,n){return[t,n]}function i(t){return null===t?NaN:+t}function o(t,n){var e,r,o=t.length,u=0,a=-1,c=0,s=0;if(null==n)for(;++a=Xs?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=Hs?10:o>=js?5:o>=Xs?2:1)}function p(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=Hs?i*=10:o>=js?i*=5:o>=Xs&&(i*=2),n=1)return+e(t[r-1],r-1,t);var r,o=(r-1)*n,u=Math.floor(o),a=+e(t[u],u,t);return a+(+e(t[u+1],u+1,t)-a)*(o-u)}}function g(t){for(var n,e,r,i=t.length,o=-1,u=0;++o=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function _(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o=e)for(r=e;++oe&&(r=e)}else for(;++o=e)for(r=e;++oe&&(r=e);return r}function y(t){if(!(i=t.length))return[];for(var n=-1,e=_(t,m),r=new Array(e);++n4&240,n>>4&15|240&n,(15&n)16&255,t>>8&255,255&t,1)}function Ct(t,n,e,r){return r0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(e.substring(i-=a,i+a)),!((c+=a+1)>r));)a=t[u=(u+1)%t.length];return o.reverse().join(n)}}(t.grouping,t.thousands):Oe,r=t.currency,i=t.decimal,o=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Oe,u=t.percent||\"%\";return{format:n,formatPrefix:function(t,e){var r=n((t=De(t),t.type=\"f\",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Le(e)/3))),o=Math.pow(10,-i),u=jh[8+i/3];return function(t){return r(o*t)+u}}}}function Ie(n){return Hh=Fe(n),t.format=Hh.format,t.formatPrefix=Hh.formatPrefix,Hh}function Ye(t){return Math.max(0,-Le(Math.abs(t)))}function Be(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Le(n)/3)))-Le(Math.abs(t)))}function He(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Le(n)-Le(t))+1}function je(){return new Xe}function Xe(){this.reset()}function Ve(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}function $e(t){return t>1?0:t1?kp:t=0?1:-1,i=r*e,o=Lp(n),u=Fp(n),a=Zh*u,c=Wh*o+a*Lp(i),s=a*r*Fp(i);Xp.add(Rp(s,c)),$h=t,Wh=o,Zh=u}function or(t){return[Rp(t[1],t[0]),We(t[2])]}function ur(t){var n=t[0],e=t[1],r=Lp(e);return[r*Lp(n),r*Fp(n),Fp(e)]}function ar(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function cr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function sr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function fr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function lr(t){var n=Yp(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function hr(t,n){ip.push(op=[Gh=t,Jh=t]),nKh&&(Kh=n)}function pr(t,n){var e=ur([t*Cp,n*Cp]);if(rp){var r=cr(rp,e),i=cr([r[1],-r[0],0],r);lr(i),i=or(i);var o,u=t-tp,a=u>0?1:-1,c=i[0]*Ap*a,s=zp(u)>180;s^(a*tpmr(Gh,Jh)&&(Jh=t):mr(t,Jh)>mr(Gh,Jh)&&(Gh=t)}else ip.push(op=[Gh=t,Jh=t]);nKh&&(Kh=n),rp=e,tp=t}function dr(){Zp.point=pr}function vr(){op[0]=Gh,op[1]=Jh,Zp.point=hr,rp=null}function gr(t,n){if(rp){var e=t-tp;Wp.add(zp(e)>180?e+(e>0?360:-360):e)}else np=t,ep=n;$p.point(t,n),pr(t,n)}function _r(){$p.lineStart()}function yr(){gr(np,ep),$p.lineEnd(),zp(Wp)>Mp&&(Gh=-(Jh=180)),op[0]=Gh,op[1]=Jh,rp=null}function mr(t,n){return(n-=t)0?io)&&(i+=r*Ep));for(var s,f=i;r>0?f>o:f1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Hr(t,n){return zp(t[0]-n[0])Np,k=d*x;if(cd.add(Rp(k*M*Fp(T),v*b+k*Lp(T))),o+=N?w+M*Ep:w,N^h>=e^y>=e){var S=cr(ur(l),ur(_));lr(S);var E=cr(i,S);lr(E);var A=(N^w>=0?-1:1)*We(E[2]);(r>A||r===A&&(S[0]||S[1]))&&(u+=N^w>=0?1:-1)}}return(o4*n&&v--){var x=u+h,b=a+p,w=c+d,M=Yp(x*x+b*b+w*w),T=We(w/=M),N=zp(zp(w)-1).3||u*h+a*p+c*d2?t[2]%360*Cp:0,r()):[x*Ap,b*Ap,w*Ap]},n.precision=function(t){return arguments.length?(E=Fi(e,S=t*t),i()):Yp(S)},n.fitExtent=function(t,e){return qi(n,t,e)},n.fitSize=function(t,e){return Di(n,t,e)},n.fitWidth=function(t,e){return Ui(n,t,e)},n.fitHeight=function(t,e){return Oi(n,t,e)},function(){return o=t.apply(this,arguments),n.invert=o.invert&&function(t){return(t=s.invert((t[0]-u)/v,(a-t[1])/v))&&[t[0]*Ap,t[1]*Ap]},r()}}function Bi(t){var n=0,e=Np/3,r=Yi(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Cp,e=t[1]*Cp):[n*Ap,e*Ap]},i}function Hi(t,n){function e(t,n){var e=Yp(o-2*i*Fp(n))/i;return[e*Fp(t*=i),u-e*Lp(t)]}var r=Fp(t),i=(r+Fp(n))/2;if(zp(i)0?nkp-Mp&&(n=kp-Mp);var e=o/Op(Gi(n),i);return[e*Fp(i*t),o-e*Lp(i*t)]}var r=Lp(t),i=t===n?Fp(t):Up(r/Lp(n))/Up(Gi(n)/Gi(t)),o=r*Op(Gi(t),i)/i;return i?(e.invert=function(t,n){var e=o-n,r=Ip(i)*Yp(t*t+e*e);return[Rp(t,zp(e))/i*Ip(e),2*Pp(Op(o/r,1/i))-kp]},e):Wi}function Ji(t,n){return[t,n]}function Ki(t,n){function e(t,n){var e=o-n,r=i*t;return[e*Fp(r),o-e*Lp(r)]}var r=Lp(t),i=t===n?Fp(t):(r-Lp(n))/(n-t),o=r/i+t;return zp(i)=0;)n+=e[r].value;else n=1;t.value=n}function fo(t,n){var e,r,i,o,u,a=new vo(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=lo);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new vo(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(po)}function lo(t){return t.children}function ho(t){t.data=t.data.data}function po(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;wo(e,n,r=t[2]),n=new No(n),e=new No(e),r=new No(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;ah&&(h=a),g=f*f*v,(p=Math.max(h/g,g/l))>d){f-=a;break}d=p}_.push(u={value:f,dice:c1&&Vo(t[e[r-2]],t[e[r-1]],t[i])=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Jo(t)}function Jo(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Ko(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error(\"invalid concurrency\");return new Zo(t)}function tu(){return Math.random()}function nu(t,n){function e(t){var n,e=s.status;if(!e&&function(t){var n=t.responseType;return n&&\"text\"!==n?t.response:t.responseText}(s)||e>=200&&e3&&e(t)},s.onprogress=function(t){a.call(\"progress\",r,t)},r={header:function(t,n){return t=(t+\"\").toLowerCase(),arguments.length"}],"posts":[{"title":"t-sne之初体验","slug":"t-sne_how_use","date":"2018-07-05T17:00:00.000Z","updated":"2018-07-06T16:18:12.381Z","comments":true,"path":"2018/07/06/t-sne_how_use/","link":"","permalink":"https://www.xunhanliu.top/2018/07/06/t-sne_how_use/","excerpt":"","text":"t-sen第一贱开锋1、简介 原文链接&emsp;&emsp;t-sen（非线性）在2008年首次被 van der Maaten and Hinton in 2008 [1] 引入，在机器学习领域应用很广泛。它能把多维数据映射到2维数据，从而在二维平面上显示（分别对应直角坐标系的x,y。此时横纵坐标是无意义的。例如，x不是某几个维度的线性组合，所以没法解释x轴表示什么意义。其他的降维方法，降维至2维平面上也可以这样显示）。当参数调整不合适的时候，整个图像容易被误读。&emsp;&emsp;这里主要关注它的参数：“perplexity”。这个参数从某种意义上来说，是对邻居点的猜测。一般取55到50。注：t-sen每次输出的图像都是不固定。 #tray-container { width: 100%; position: fixed; top: 0; left: 0; z-index: 100; top: -410px; transition: top 0.3s; } #tray { position: relative; border: 2px solid steelblue; background: white; padding: 24px 24px 60px 24px; box-shadow: 0px 2px 24px rgba(0, 0, 0, 0.2); box-sizing: border-box; margin: 0 auto; height: 380px; display: flex; justify-content: center; max-width: 700px; border-radius: 4px; } #tray-container.modal { top: -4px; } #tray-content { width: 55%; height: 100%; font-size: 12px; position: relative; top: -12px; } #tray-content canvas { width: 100%; } #tray-options { padding-left: 36px; font-size: 13px; line-height: 1.5em; height: 100%; width: 45%; } #tray-options #tray-controls { margin-bottom: 24px; display: flex; align-items: center; } #tray-controls button { cursor: pointer; outline: none; border-radius: 50%; background: steelblue; color: white; width: 48px; height: 48px; border: none; margin-right: 12px; } #tray-controls .play-pause i { display: none; font-size: 30px; } #tray-controls .play-pause.paused i:nth-child(1) { display: block; } #tray-controls .play-pause.playing i:nth-child(2) { display: block; } #tray-steps-display { text-align: center; width: 48px; font-size: 15px; } #tray input { margin-bottom: 12px; margin-left: -2px; } #tray-data-sliders { } #tray-tsne-sliders { } #tray-close { cursor: pointer; outline: none; background: white; border: none; text-align: center; position: absolute; bottom: 0; width: 100%; padding: 6px 0; background: #f0f4f5; opacity: 0.6; color: steelblue; left: 0; } #tray-close:hover { opacity: 1; } play_arrow pause refresh Step: expand_less // This depends on playground.js having setup the GLOBAL object function runTrayState() { // Set up t-SNE and start it running. var state = GLOBALS.trayState; var points = state.demo.generator.apply(null, state.demoParams); var canvas = d3.select(\"#tray-content canvas\").node() // if there was already a playground demo going, lets destroy it and make a new one if (GLOBALS.trayDemo) { GLOBALS.trayDemo.destroy(); delete GLOBALS.trayDemo; } GLOBALS.trayDemo = demoMaker(points, canvas, state, function (step) { d3.select(\"#tray-controls .step\").text(step); if (step >= state.stepLimit && !GLOBALS.trayUnpausedBefore) { setTrayRunning(false) } }) GLOBALS.trayUnpausedBefore = false; setTrayRunning(true); } function updateTraySliders() { // we regenerate all the sliders from scratch // we modify the global tray state when a slider is modified var state = GLOBALS.trayState; var dataSliders = d3.select('#tray-data-sliders'); dataSliders.html(''); state.demo.options.map(function (option, i) { var value = state.demoParams[i]; var slider = makeTraySlider(dataSliders.node(), option.name, option.min, option.max, value, function () { // when this one updates we change the appropriate state GLOBALS.trayState.demoParams[i] = +slider.value runTrayState(); }); }); var tsneSliders = d3.select('#tray-tsne-sliders'); tsneSliders.html(''); var perpSlider = makeTraySlider(tsneSliders.node(), \"Perplexity\", 1, 100, state.perplexity, function () { GLOBALS.trayState.perplexity = perpSlider.value runTrayState(); }); var epsSlider = makeTraySlider(tsneSliders.node(), \"Epsilon\", 1, 20, state.epsilon, function () { GLOBALS.trayState.epsilon = epsSlider.value runTrayState(); }); } function makeTraySlider(container, name, min, max, start, changeCallback) { var dis = d3.select(container) dis.append(\"span\").classed(\"slider-label-\" + name, true) .text(name + ' ') var value = dis.append(\"span\").classed(\"slider-value-\" + name, true) .text(start) var slider = dis.append(\"input\") .attr(\"type\", \"range\") .attr(\"min\", min) .attr(\"max\", max) .attr(\"value\", start) .on(\"change\", changeCallback) .on(\"input\", function () { value.text(slider.node().value); }) return slider.node(); } /* Activate the tray */ function updateStateFromFigure(figure, example, el) { var y = el.getBoundingClientRect().top; var demo = demosByName[figure.dataset]; var state = { demo: demos[demo.index], demoParams: figure.params.map(function (d) { return d }), perplexity: example.perplexity, epsilon: example.epsilon, stepLimit: example.step } GLOBALS.trayState = state; runTrayState() updateTraySliders() d3.select(\"#tray-container\").classed(\"modal\", true) GLOBALS.trayOpen = true; } d3.select(\"body\").on(\"keydown\", function () { if (d3.event.keyCode === 27) { setTrayRunning(false) d3.select(\"#tray-container\").classed(\"modal\", false); d3.selectAll(\".runner\").classed(\"selected\", false); } }) d3.select(\"#tray-close\").on(\"click\", function () { setTrayRunning(false); GLOBALS.trayOpen = false; d3.select(\"#tray-container\").classed(\"modal\", false) d3.selectAll(\".runner\").classed(\"selected\", false); }) /* Tray Controls */ var trayPlay = d3.select(\"#tray-controls .play-pause\") function setTrayRunning(r) { GLOBALS.running = r; if (GLOBALS.running) { GLOBALS.trayDemo.unpause(); trayPlay .classed(\"playing\", true) .classed(\"paused\", false); } else { GLOBALS.trayDemo.pause(); trayPlay .classed(\"playing\", false) .classed(\"paused\", true); } } // Hook up play / pause / restart buttons. trayPlay.on(\"click\", function () { GLOBALS.trayUnpausedBefore = true; setTrayRunning(!GLOBALS.running); }); var trayRestart = d3.select(\"#tray-controls .restart\") .on(\"click\", function () { runTrayState(); }) d3.select(window).on(\"scroll.tray\", function () { if (GLOBALS.trayOpen) { if (scrollY < 1000) { setTrayRunning(false); GLOBALS.trayOpen = false; d3.select(\"#tray-container\").classed(\"modal\", false); d3.selectAll(\".runner\").classed(\"selected\", false); } } }); /* Tray sliders */ #playground { overflow: hidden; font-family: 'Open Sans', sans-serif; border-top: 1px solid rgba(0, 0, 0, 0.1); /*border-bottom: 1px solid rgba(0, 0, 0, 0.1);*/ margin-top: 36px; padding: 36px 0 0 0; /*background: #fcfcfc;*/ z-index: 1000; } #playground * { box-sizing: border-box; } #playground.modal { position: fixed; left: 10px; right: 10px; top: 50px; } /* Playground Canvas */ #playground-canvas { float: left; width: 55%; } #playground-canvas canvas { width: 100%; } /* Data Menu */ #data-menu { /*float: left;*/ /*width: 25%*/ width: 40%; float: left; margin-bottom: 24px; overflow: hidden; margin-left: 5%; } #data-menu .demo-data { cursor: pointer; position: relative; font-size: 10px; line-height: 1.2em; box-sizing: border-box; float: left; margin: 2px; padding: 4px; width: calc(33% - 4px); background: white; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 4px; box-shadow: 0 0 3px rgba(0, 0, 0, 0.08); } @media (min-width: 480px) { #data-menu .demo-data { width: calc(25% - 8px); padding: 8px; margin: 4px; } } @media (min-width: 768px) { #data-menu .demo-data { width: calc(16.5% - 8px); padding: 8px; margin: 4px; } } #data-menu .demo-data:hover { border: 1px solid rgba(0, 0, 0, 0.2); } #data-menu .demo-data.selected::after { content: \"\"; border: 2px solid rgba(70, 130, 180, 0.8); width: 100%; height: 100%; position: absolute; top: 0; left: 0; box-sizing: border-box; border-radius: 4px; } #data-menu .demo-data span { display: none; } #data-menu .demo-data:hover canvas { opacity: 1; } #data-menu .demo-data canvas { width: 100%; opacity: 0.3; } #data-menu .demo-data.selected canvas { opacity: 1; } /* Data Details */ #data-details { position: relative; } @media (min-width: 768px) { #data-details { width: 40%; float: right; } } #data-details #data-controls { width: 40%; float: right; position: relative; overflow: hidden; font-size: 13px; } @media (min-width: 768px) { #data-details #data-controls { width: 50%; margin-right: 10%; float: left; } } #data-details #play-controls { margin-bottom: 18px; overflow: hidden; position: relative; } #data-details #play-controls button { cursor: pointer; outline: none; border-radius: 50%; background: steelblue; color: white; width: 25%; margin-right: 5%; padding-top: 25%; padding-bottom: 0; border: none; float: left; position: relative; } #play-controls i { display: block; position: absolute; top: 50%; left: 0; width: 100%; height: 36px; font-size: 24px; line-height: 0; } @media (min-width: 768px) { #play-controls i { font-size: 30px; } } #play-controls #play-pause i { display: none; position: absolute; } #play-controls #play-pause.paused i:nth-child(1) { display: block; } #play-controls #play-pause.playing i:nth-child(2) { display: block; } #steps-display { float: left; text-align: center; width: 25%; line-height: 1.5em; font-size: 13px; } @media (min-width: 1024px) { #steps-display { font-size: 16px; line-height: 1.6em; } } #data-details #data-description { width: 50%; margin-right: 10%; float: right; font-size: 14px; line-height: 1.6em; } @media (min-width: 768px) { #data-details #data-description { width: 40%; float: left; margin-right: 0; } } /* Options */ #data-details #options { float: left; padding-left: 36px; font-size: 13px; line-height: 1.5em; width: 45%; } #data-details input { display: block; width: 100%; margin: 8px 0 16px 0; } #options #data-options { width: 45%; margin-left: 4px; } #options #tsne-options { width: 45%; margin-left: 4px; } #data-details #share { margin-top: 8px; display: block; color: rgba(0, 0, 0, 0.4); text-decoration: none; font-size: 12px; } #data-details #share:hover { text-decoration: underline; } #data-details #share i { line-height: 0px; position: relative; top: 7px; } play_arrowpause refresh Step link Share this view 2、初步体验perplexity参数和step参数 &emsp;&emsp;上图由于perplexity参数的不同，呈现出不同的结果（每个图都执行了5000次迭代）。最重要的是在它们达到稳定状态的时候，如何解释！ &emsp;&emsp;上图的perplexity都是 30，而step分别是：10、20、60、120、1000。没有固定的步数，不同的数据集需要不同的迭代次数来收敛。不同的数据集可能聚合成相似的结果。 3、簇的大小无意义 &emsp;&emsp;想一下这个问题：有两簇数据，它们的标准差不一样，是不是意味着标准差越小，簇越小？ &emsp;&emsp;上图中，一个簇的分散程度是另一个簇的10倍（点数应该是一样的）。调整perplexity，结果如上。结论是：簇的大小无意义。 4、簇之间的距离可能无意义 &emsp;&emsp;问题：距离越近是不是关系越强？ &emsp;&emsp;上图中初始点是3簇，它们均有50点，均满足高斯分布。一对的距离是另一对的5倍。&emsp;&emsp;上图实验结果如下：perplexity=50的时候，几何结构非常好。&lt;50的时候，它们间距都差不多。=100的时候，其中一个簇非常小。=50的时候，结果非常“理想”，是不是意味着设置成50，我们总能看到好的结果？&emsp;&emsp;Sadly, no！ 如果我们增加了点数，就需要增加perplexity进行补偿。下面这个实验吧点数增加到200。 5、随机点的结果并不总是随机的 &emsp;&emsp;一个典型的陷阱是，你在真正的随机数据中看到了模式。下面一个实验是：500个服从单位高斯分布的点，数据集是100维的。下面的original图是前两维数据的映射。 &emsp;&emsp;perplexity=2的时候，呈现戏剧性的聚类，如果就此发现了数据结构，你可能认为自己中了头彩！&emsp;&emsp;从上面所有的实验可以看出perplexity比较低的时候可能会导致这类的分布。识别这些欺骗性的块是识别t-SNE图的一项重要部分。事实上，上图这些特征非常接近于球面上的均匀分布：均匀分布，在点之间的空间大致相等。看到这，t-sne可能比所有线性映射都更精确。 6、有时，你会看到一些形状 &emsp;&emsp;让我们看一下在50维空间中与轴对齐的高斯分布，在这里，坐标i的标准偏差是1/i。也就是说，我们看到的是一个稍长的椭球点云。 &emsp;&emsp;从上图的结果可以看到，perplexity足够大的时候，稍长的形状很容易看到。但=2的时候，无意义的簇开始占主导。有时候，在特定的perplexity，可以看到特定的形状。&emsp;&emsp;下图的数据是2维平面上75点的两簇数据。平行线排列，有一点噪声。 &emsp;&emsp;线条弯曲解释：t-sne尝试扩大数据的密集区域。因为簇的中间区域比边缘区域有更大的密度，t-sne会放大这个特征。 7、拓扑数据，你可能需要更多的图 &emsp;&emsp;一个典型的拓扑特征是包含。下图的数据源是：两组50维的数据，各有70点。它们都是从关于原点对称的高斯分布中取样的。但是，一个数据点的分布是另一个的50倍。“小”分布实际上包含在大的分布中。 &emsp;&emsp;perplexity=30的时候，内群的大小被过分夸大。perplexity=50的时候，外群变成了一个圆一样的结构，这个图试图描述所有的点都与内群的距离相同的事实（实际不是如此）。如果单独看外群，可能会认为它是一个一维的结构。但是更复杂的拓扑结构呢？&emsp;&emsp;下图原始结构是一个俩环相互嵌套的结构。perplexity比较小的时候，两环分离了！ &emsp;&emsp;下图是一个三叶草结构的数据。 &emsp;&emsp;下图是三叶草结构perplexity=2的5次运行结果。（正如前面所说，t-sne每次运行，可能得到的结果都不一样，即使设置的参数一样） >&emsp;&emsp;下图是三叶草结构perplexity=50的5次运行结果。（可以看到，perplexity不能设置得太小） 8、结论 &emsp;&emsp;tsen灵活性强，能经常发现其他降维方法发现不了的特征。 .tsne-group { overflow: visible; display: -webkit-flex; display: flex; flex-direction: column; margin-top: 36px; margin-bottom: 36px; } @media (min-width: 640px) { .tsne-group { -webkit-flex-direction: row; flex-direction: row; } } .tsne-group .original, .tsne-group .runner { box-sizing: border-box; -webkit-flex-grow: 1; flex-grow: 1; position: relative; display: -webkit-flex; display: flex; margin-bottom: 12px; } .tsne-group .original { position: relative; border-bottom: 1px solid rgba(0, 0, 0, 0.1); padding-bottom: 12px; } @media (min-width: 640px) { .tsne-group .original, .tsne-group .runner { display: block; width: 100%; margin-bottom: 0; } .tsne-group .original { margin-left: 0; padding-right: 12px; border-right: 1px solid rgba(0, 0, 0, 0.1); border-bottom: none; padding-bottom: 0; } .tsne-group .runner { margin-left: 12px; } } .tsne-group .runner.no-click { cursor: default; } .runner.clickable { cursor: pointer; } .runner.clickable:hover .image { box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08); } .runner:hover i { opacity: 1; } .runner.selected i { opacity: 1; } .runner i { font-size: 30px; position: absolute; top: 1px; left: 1px; background-color: hsla(207, 44%, 79%, 0.8); color: steelblue; border-radius: 4px; opacity: 0; transition: opacity 0.3s; line-height: 0; width: 150px; padding: 75px 0; text-align: center; } @media (min-width: 640px) { .runner i { width: 100%; padding: 50% 0; } } .runner.selected .image::after { content: \"\"; border: 2px solid rgba(70, 130, 180, 1); width: 100%; height: 100%; position: absolute; top: 0; box-sizing: border-box; border-radius: 4px; z-index: 10; } .tsne-group .image { border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 4px; box-shadow: 0 0 6px rgba(0, 0, 0, 0.08); width: 150px; padding-top: 150px; background: white; position: relative; transition: border-color 0.3s, box-shadow 0.3s; margin-right: 12px; } @media (min-width: 640px) { .tsne-group .image { width: 100%; padding-top: 100%; margin-right: 0; } } .tsne-group .original .image { box-shadow: none; } .tsne-group .image img { position: absolute; top: 5%; left: 5%; width: 90%; } .tsne-group h3.caption { font-size: 15px; margin-top: 12px; } .tsne-group .caption { font-size: 12px; line-height: 1.6em; margin-top: 12px; width: 100px; } @media (min-width: 640px) { .tsne-group .caption, .tsne-group h3.caption { margin-top: 8px; width: 100%; } } (function () { var format = d3.format(\",\"); d3.selectAll(\".tsne-group\").data(figures, function (d) { if (!d) return this.dataset.id; return d.id }) .each(generateFigure) function generateFigure(figure) { var FIGURE = figure.id var dis = d3.select(this) var original = dis.append(\"div\").classed(\"original\", true) original.append(\"div\") .classed(\"image\", true) .append(\"img\") .classed(\"tsne-plot\", true) .attr(\"src\", \"./figure_\" + FIGURE + \"_\" + \"original.png\"); original.append(\"h3\").classed(\"caption\", true).text(\"Original\") // examples var runners = dis.selectAll(\".runner\").data(figure.examples) .enter().append(\"div\").classed(\"runner\", true) if (!figure.noclick) { runners .classed(\"clickable\", true) .on(\"click\", function (d) { d3.selectAll(\".runner\").classed(\"selected\", false) updateStateFromFigure(figure, d, this); d3.select(this).classed(\"selected\", true) }); } else { runners.classed(\"no-click\", true) } runners.append(\"div\") .classed(\"image\", true) .append(\"img\") .attr(\"src\", function (d, i) { return \"./figure_\" + FIGURE + \"_\" + d.id + \".png\" }); if (!figure.noclick) { runners.append(\"i\") .classed(\"material-icons\", true) .text(\"open_in_browser\") } var caption = runners.append(\"div\").classed(\"caption\", true); caption.append(\"div\").text(function (d) { return \"Perplexity: \" + format(d.perplexity); }) caption.append(\"div\").text(function (d) { return \"Step: \" + format(d.step); }) } })() dt-cite { color: hsla(206, 90%, 20%, 0.7); } dt-cite .citation-number { cursor: default; white-space: nowrap; font-family: -apple-system, BlinkMacSystemFont, \"Roboto\", Helvetica, sans-serif; font-size: 75%; color: hsla(206, 90%, 20%, 0.7); display: inline-block; line-height: 1.1em; text-align: center; position: relative; top: -2px; margin: 0 2px; } figcaption dt-cite .citation-number { font-size: 11px; font-weight: normal; top: -2px; line-height: 1em; } Visualizing data using t-SNE [PDF]L.v.d. Maaten, G. Hinton.Journal of Machine Learning Research, Vol 9(Nov), pp. 2579—2605. 2008. function nodeFromString(str) { var div = document.createElement(\"div\"); div.innerHTML = str; return div.firstChild; } function make_hover_css(pos) { var pretty = window.innerWidth > 600; var padding = pretty ? 18 : 12; var outer_padding = pretty ? 18 : 0; var bbox = document.querySelector(\"body\").getBoundingClientRect(); var left = pos[0] - bbox.left, top = pos[1] - bbox.top; var width = Math.min(window.innerWidth - 2 * outer_padding, 648); left = Math.min(left, window.innerWidth - width - outer_padding); width = width - 2 * padding; return (`position: absolute; background-color: #FFF; opacity: 0.95; max-width: ${width}px; top: ${top}px; left: ${left}px; border: 1px solid rgba(0, 0, 0, 0.25); padding: ${padding}px; border-radius: ${pretty ? 3 : 0}px; box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.2); z-index: ${1e6};`); } function DtHoverBox(div_id) { this.div = document.querySelector(\"#\" + div_id); this.visible = false; this.bindDivEvents(); DtHoverBox.box_map[div_id] = this; } DtHoverBox.box_map = {}; DtHoverBox.get_box = function get_box(div_id) { if (div_id in DtHoverBox.box_map) { return DtHoverBox.box_map[div_id]; } else { return new DtHoverBox(div_id); } } DtHoverBox.prototype.show = function show(pos) { this.visible = true; this.div.setAttribute(\"style\", make_hover_css(pos)); for (var box_id in DtHoverBox.box_map) { var box = DtHoverBox.box_map[box_id]; if (box != this) box.hide(); } } DtHoverBox.prototype.showAtNode = function showAtNode(node) { var bbox = node.getBoundingClientRect(); this.show([bbox.right, bbox.bottom]); } DtHoverBox.prototype.hide = function hide() { this.visible = false; if (this.div) this.div.setAttribute(\"style\", \"display:none\"); if (this.timeout) clearTimeout(this.timeout); } DtHoverBox.prototype.stopTimeout = function stopTimeout() { if (this.timeout) clearTimeout(this.timeout); } DtHoverBox.prototype.extendTimeout = function extendTimeout(T) { //console.log(\"extend\", T) var this_ = this; this.stopTimeout(); this.timeout = setTimeout(function () { this_.hide(); }.bind(this), T); } // Bind events to a link to open this box DtHoverBox.prototype.bind = function bind(node) { if (typeof node == \"string\") { node = document.querySelector(node); } node.addEventListener(\"mouseover\", function () { if (!this.visible) this.showAtNode(node); this.stopTimeout(); }.bind(this)); node.addEventListener(\"mouseout\", function () { this.extendTimeout(250); }.bind(this)); node.addEventListener(\"touchstart\", function (e) { if (this.visible) { this.hide(); } else { this.showAtNode(node); } // Don't trigger body touchstart event when touching link e.stopPropagation(); }.bind(this)); } DtHoverBox.prototype.bindDivEvents = function bindDivEvents() { // For mice, same behavior as hovering on links this.div.addEventListener(\"mouseover\", function () { if (!this.visible) this.showAtNode(node); this.stopTimeout(); }.bind(this)); this.div.addEventListener(\"mouseout\", function () { this.extendTimeout(250); }.bind(this)); // Don't trigger body touchstart event when touching within box this.div.addEventListener(\"touchstart\", function (e) { e.stopPropagation(); }); // Close box when touching outside box document.body.addEventListener(\"touchstart\", function () { this.hide(); }.bind(this)); } var hover_es = document.querySelectorAll(\"span[data-hover-ref]\"); hover_es = [].slice.apply(hover_es); hover_es.forEach(function (e, n) { var ref_id = e.getAttribute(\"data-hover-ref\"); DtHoverBox.get_box(ref_id).bind(e); })","categories":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/tags/test/"}]},{"title":"test","slug":"test","date":"2018-07-03T16:58:20.000Z","updated":"2018-07-05T14:24:16.394Z","comments":true,"path":"2018/07/04/test/","link":"","permalink":"https://www.xunhanliu.top/2018/07/04/test/","excerpt":"","text":"测试图片链接连接为：&lt;%- url_for(post.path) %&gt;连接1为：&lt;%- url_for(path) %&gt;连接2为：&lt;%- url_for(page.path) %&gt;ssss","categories":[{"name":"mCat1","slug":"mCat1","permalink":"https://www.xunhanliu.top/categories/mCat1/"}],"tags":[{"name":"mtag1","slug":"mtag1","permalink":"https://www.xunhanliu.top/tags/mtag1/"},{"name":"mtag2","slug":"mtag2","permalink":"https://www.xunhanliu.top/tags/mtag2/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-31T16:00:00.000Z","updated":"2018-07-03T19:05:09.545Z","comments":true,"path":"2017/08/01/hello-world/","link":"","permalink":"https://www.xunhanliu.top/2017/08/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"开源项目","slug":"开源项目","permalink":"https://www.xunhanliu.top/categories/开源项目/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://www.xunhanliu.top/tags/博客/"},{"name":"开源项目","slug":"开源项目","permalink":"https://www.xunhanliu.top/tags/开源项目/"}]},{"title":"MiHo-主题安装和配置详情","slug":"installation-configuration","date":"2017-07-31T16:00:00.000Z","updated":"2018-07-05T03:07:16.441Z","comments":true,"path":"2017/08/01/installation-configuration/","link":"","permalink":"https://www.xunhanliu.top/2017/08/01/installation-configuration/","excerpt":"","text":"一. 主题简介&emsp;&emsp;MiHo 是一款单栏响应式的Hexo主题；基于 Hexo 3.0+ 制作，兼容移动端浏览；主题的代码托管在GitHub上，欢迎Star和Fork；如遇到问题或发表建议，可以提Issues，也可以在博客中留言给我，另外,喜欢的话不妨给个 Star。 二. 安装2.1 安装主题1$ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho MiHo 主题需要Hexo 3.0或以上版本，请先升级。 2.2 更新12cd themes/mihogit pull 2.3 依赖安装如下依赖如果已经安装，请看配置介绍。 Json-content生成站点文章静态数据，用于站内搜索。1npm install hexo-generator-json-content --save 三. 站点配置站点配置文件_config.yml在hexo根目录下。 3.1 启用主题1`theme: miho` 3.2 网站基本配置以下配置是站点的全局配置，更多配置，请查看123456title: MinHow's Blogsubtitle: 网站副标题description: 专注 WEB 开发的技术博客author: MinHowlanguage: 网站使用的语言timezone: 网站时区 3.3 jsonContent配置详细的配置请查看hexo-generator-json-content123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: false 四. 主题配置编辑主题配置文件，themes/miho/_config.yml。 4.1 属性下面将介绍几个比较重要的配置。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# hexo-theme-miho# https://github.com/wongminho/hexo-theme-miho# Favicon of your site | 网站iconfavicon: /favicon.ico# Header# Keywords of your site | 网站关键字keywords: MinHow,MinHow's Blog# Head headline | 头部标题header_title: MinHow's Blog# Head description | 头部描述header_description: 一个专注 WEB 开发的技术博客# Link to your logo | logo地址logo: images/logo.png# Link to your banner_img | 首页banner图地址banner_img: images/banner.jpg# Menu setting | 菜单设置# name: Font Awesome icon | Font Awesome 图标# title: Home Title | 标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出menu: home: title: Home url: / target: false archive: title: Archives url: /archives target: false user: title: About url: /about target: false# Social setting, use to display social information | 社交设置，用来展示社交信息# name: Font Awesome icon | Font Awesome 图标# title: Home Icon title | 图标标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出social: home: title: MinHow url: //minhow.com target: true github: title: Github url: //github.com/wongminho target: true weibo: title: Weibo url: //weibo.com/WongMinHo target: true twitter: title: Twitter url: //twitter.com/huangminhow target: true #qq: #weixin: #snapchat: #telegram: #mail: #facebook: #google: #linkedin:# Content# Excerpt length | 摘录长度excerpt_length: 190# Excerpt link | 摘录链接excerpt_link: more&gt;&gt;# New window open link | 新窗口打开文章open_new_link: false# Article default cover picture，size：350*150 | 文章默认封面图，尺寸：350*150cover_picture: images/banner.jpg# Open background particles | 开启背景粒子open_bg_particle: true# Open animation in homepage and head | 开启主页及头部动画open_animation: true# Article# Open toc | 是否开启toctoc: true# Open share | 是否开启分享share: true# Style customization | 样式定制style: # Main color tone | 主色调 main_color: '#0cc'# Comments | 评论# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false# Analytics | 分析# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google analytics | google分析google_analytics: false# Footer# Access statistics | “不蒜子”访问量统计access_counter: on: true site_uv: 总访客数： site_pv: 总访问量：# Copyright Information | 版权信息copyright: 2017 MinHow 4.2 文章封面图文章默认封面图，尺寸：350*150，当文章基本配置没有cover_picture时才显示。1cover_picture: images/banner.jpg 4.3 开启背景粒子是否开启背景粒子。1open_bg_particle: true 4.4 开启主页及头部动画是否开启主页及头部动画。1open_animation: true 4.5 评论支持畅言、disqus。1234567# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false 4.6 数据统计支持站长、百度、google三种数据统计，正确填写配置信息即可。123456# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google分析google_analytics: false 4.7 文章基本配置123456789101112---title: Hello Worlddate: 2017-06-18categories: Firstauthor: MinHowtags: - First - Secondcover_picture: /images/banner.jpg--- MinHow-This is a summary&lt;!-- more --&gt; 说明： 需要注意tags和摘要的写法，不然首页不能正确显示标签和摘要； cover_picture文章封面图，不填默认显示_config.yml配置的图片。","categories":[{"name":"开源项目","slug":"开源项目","permalink":"https://www.xunhanliu.top/categories/开源项目/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://www.xunhanliu.top/tags/博客/"},{"name":"开源项目","slug":"开源项目","permalink":"https://www.xunhanliu.top/tags/开源项目/"}]},{"title":"md文件模板+html","slug":"testHtml","date":"2017-07-31T16:00:00.000Z","updated":"2018-07-05T14:12:53.123Z","comments":true,"path":"2017/08/01/testHtml/","link":"","permalink":"https://www.xunhanliu.top/2017/08/01/testHtml/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/tags/test/"}]},{"title":"test_Md+Html","slug":"testMd+Html","date":"2017-07-31T16:00:00.000Z","updated":"2018-07-05T15:05:46.931Z","comments":false,"path":"2017/08/01/testMd+Html/","link":"","permalink":"https://www.xunhanliu.top/2017/08/01/testMd+Html/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 内联style—# 又一个title—2级标题3级标题4级标题外联style","categories":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://www.xunhanliu.top/tags/test/"}]}]}